{"version":3,"sources":["logo.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","quotesData","authorNames","QuoteBox","state","quote","author","Math","floor","random","length","fetch","then","response","text","console","log","split","updateQuote","this","setState","prevState","props","id","onClick","href","encodeURIComponent","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6FAAAA,EAAOC,QAAU,IAA0B,kC,uMCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAIC,EAAa,CAAC,cACdC,EAAc,CAAC,gBAAiB,qBAAsB,mBAC1D,cAAe,WAAY,YAErBC,E,YACJ,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,MAAO,UACPC,OAAQC,KAAKC,MAAMD,KAAKE,SAAWP,EAAYQ,SAJrC,E,iFAQO,IAAD,OAClBC,MAAM,mFACLC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAAE,GACLC,QAAQC,IAAIF,GACXb,EAAaa,EAAKG,MAAM,KACxB,EAAKC,mB,oCAIM,IAAD,OACZC,KAAKC,UAAS,SAACC,EAAWC,GACxB,MAAO,CACLjB,MAAOJ,EAAWM,KAAKC,MAAMD,KAAKE,SAAWR,EAAWS,SACxDJ,QAAU,EAAKF,MAAME,OAAS,GAAKJ,EAAYQ,a,+BAK3C,IAAD,OACP,OAAQ,yBAAKa,GAAG,aACN,yBAAKA,GAAG,SACN,2BAAOA,GAAG,QAAQJ,KAAKf,MAAMC,QAE/B,yBAAKkB,GAAG,SACN,uBAAGA,GAAG,UAAUrB,EAAYiB,KAAKf,MAAME,UAEzC,yBAAKiB,GAAG,SACN,uBAAGA,GAAG,YAAYC,QAAS,kBAAM,EAAKN,gBAAtC,cAEF,yBAAKK,GAAG,SACN,uBAAGE,KAAM,8EAAgFC,mBAAmB,IAAMP,KAAKf,MAAMC,MAAQ,SAAWH,EAAYiB,KAAKf,MAAME,QAAU,MAAOiB,GAAG,eAA3L,e,GA1COI,IAAMC,WAiD7BC,IAASC,OAAO,kBAAC,EAAD,MAAcC,SAASC,eAAe,QDwEhD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.f3fb60ff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nlet quotesData = ['Loading...'];\nlet authorNames = ['Douglas Adams', 'Douglas Noel Adams', 'Douglas N. Adams',\n'D. N. Adams', 'D. Adams', 'D. N. A.'];\n\nclass QuoteBox extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      quote: 'Loading',\n      author: Math.floor(Math.random() * authorNames.length)\n    };\n  }\n\n  componentDidMount() {\n    fetch(`https://raw.githubusercontent.com/davidmorton0/QuoteGenerator/master/quotes.txt`)\n    .then(response => {\n      return response.text()\n     })\n    .then(text => {\n  \t  console.log(text);\n      quotesData = text.split('|');\n      this.updateQuote();\n    });\n  }\n\n  updateQuote() {\n    this.setState((prevState, props) => {\n      return {\n        quote: quotesData[Math.floor(Math.random() * quotesData.length)],\n        author : (this.state.author + 1) % authorNames.length\n      };\n    });\n  }\n\n  render() {\n    return (<div id=\"quote-box\">\n              <div id=\"item1\">\n                <quote id=\"text\">{this.state.quote}</quote>\n              </div>\n              <div id=\"item2\">\n                <p id=\"author\">{authorNames[this.state.author]}</p>\n              </div>\n              <div id=\"item3\">\n                <a id=\"new-quote\" onClick={() => this.updateQuote()}>New Quote</a>\n              </div>\n              <div id=\"item4\">\n                <a href={'https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=' + encodeURIComponent('\"' + this.state.quote + '\"\\n - ' + authorNames[this.state.author] + '\\n')} id=\"tweet-quote\">Tweet</a>\n               </div>\n            </div>\n           );\n  }\n}\n\nReactDOM.render(<QuoteBox />, document.getElementById('app'));\nserviceWorker.unregister();\n"],"sourceRoot":""}